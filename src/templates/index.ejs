<!DOCTYPE html>
<html>

<head>
  <title>Product Management System</title>
  <!-- Add Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

</head>

<body>
  <div class="container my-4">
    <h1 class="mb-4">Product Management System</h1>
    <form id="addProductForm">
      <div class="mb-3">
        <label for="productName" class="form-label">Product Name:</label>
        <input type="text" class="form-control" id="productName" name="productName" required>
      </div>

      <div class="mb-3">
        <label for="productDescription" class="form-label">Product Description:</label>
        <input type="text" class="form-control" id="productDescription" name="productDescription" required>
      </div>

      <div class="mb-3">
        <label for="price" class="form-label">Price:</label>
        <input type="number" class="form-control" id="price" name="price" required>
      </div>

      <div class="mb-3">
        <label for="category" class="form-label">Category:</label>
        <input type="text" class="form-control" id="category" name="category" required>
      </div>

      <div class="mb-3">
        <label for="stockQuantity" class="form-label">Stock Quantity:</label>
        <input type="number" class="form-control" id="stockQuantity" name="stockQuantity" required>
      </div>

      <button type="submit" id="submitBtn" class="btn btn-primary">Add Product</button>
    </form>

    <h2 class="my-4">Products List</h2>
    <div class="mb-3">
      <input type="text" class="form-control" id="categoryFilter" placeholder="Filter by Category">
    </div>
    <div id="productsList">
      <!-- Products will be dynamically displayed here -->
    </div>
  </div>

  <!-- Add Bootstrap and jQuery JavaScript -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script>
    const addProductForm = document.getElementById('addProductForm');
    const productsList = document.getElementById('productsList');
    const categoryFilter = document.getElementById('categoryFilter');
    let productId;
    // Function to fetch all products and update the UI
    const fetchProducts = async () => {
      try {
        const response = await axios.get('/api/v1/product');
        const products = response.data;
        const productsHTML = products.map(product => `
          <div class="card mb-3">
            <div class="card-body">
              <h3 class="card-title">${product.productName}</h3>
              <p class="card-text">Description: ${product.productDescription}</p>
              <p class="card-text">Price: $${product.price}</p>
              <p class="card-text">Category: ${product.category}</p>
              <p class="card-text">Stock Quantity: ${product.stockQuantity}</p>
              <button class="btn btn-primary" onclick="editProduct('${product.id}')">Edit</button>
              <button class="btn btn-danger" onclick="deleteProduct('${product.id}')">Delete</button>
            </div>
          </div>
        `).join('');
        productsList.innerHTML = productsHTML;
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };

    // Function to handle the form submission and add a new product
    const handleFormSubmit = async (event) => {
      event.preventDefault();
      const form = event.target;
      const formData = new FormData(form);
      const newProduct = {};
      formData.forEach((value, key) => {
        newProduct[key] = value;
      });

      try {
        if (productId) {
          await axios.put(`/api/v1/product/${productId}`, newProduct);
          document.getElementById('submitBtn').innerHTML = 'Add Product';

        } else {

          await axios.post('/api/v1/product', newProduct);
        }
        form.reset();
        fetchProducts(); // Fetch all products again to update the list
      } catch (error) {
        console.error('Error adding product:', error);
      }
    };

    addProductForm.addEventListener('submit', handleFormSubmit);

    // Function to filter products by category
    categoryFilter.addEventListener('input', async (event) => {
      const filterValue = event.target.value.trim().toLowerCase();
      const response = await axios.get(`/api/v1/product?category=${filterValue}`);
      const filteredProducts = response.data;

      const productsHTML = filteredProducts.map(product => `
        <div class="card mb-3">
          <div class="card-body">
            <h3 class="card-title">${product.productName}</h3>
            <p class="card-text">Description: ${product.productDescription}</p>
            <p class="card-text">Price: $${product.price}</p>
            <p class="card-text">Category: ${product.category}</p>
            <p class="card-text">Stock Quantity: ${product.stockQuantity}</p>
            <button class="btn btn-primary" onclick="editProduct('${product.id}')">Edit</button>
            <button class="btn btn-danger" onclick="deleteProduct('${product.id}')">Delete</button>
          </div>
        </div>
      `).join('');

      productsList.innerHTML = productsHTML;
    });

    // Function to handle editing a product
    const editProduct = async (pId) => {
      // Implement the logic for editing a product based on the productId
      console.log(`Edit product with ID: ${pId}`);
      productId = pId
      const response = await axios.get(`/api/v1/product/${productId}`);
      const product = response.data;

      // Pre-fill the edit form with product information
      document.getElementById('productName').value = product.productName;
      document.getElementById('productDescription').value = product.productDescription;
      document.getElementById('price').value = product.price;
      document.getElementById('category').value = product.category;
      document.getElementById('stockQuantity').value = product.stockQuantity;
      document.getElementById('submitBtn').innerHTML = 'Update Product';

      
    };

    // Function to handle deleting a product
    const deleteProduct = async (pId) => {
      // Implement the logic for deleting a product based on the productId
      console.log(`Delete product with ID: ${pId}`);
      const response = await axios.delete(`/api/v1/product/${pId}`);
      fetchProducts()
    };

    // Initial fetch to display existing products
    fetchProducts();
  </script>
</body>

</html>